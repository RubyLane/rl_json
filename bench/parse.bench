set here	[file normalize [file dirname [info script]]]
if {$here ni [tcl::tm::path list]} {tcl::tm::path add $here}
package require rl_json
package require json_old

namespace import ::rl_json::json

proc readfile fn { #<<<
	set h	[open $fn r]
	try {
		chan configure $h -encoding utf-8
		read $h
	} finally {
		close $h
	}
}
#>>>

proc main {} {
	global here

	# parse-1.1 <<<
	bench parse-1.1 {Parse a small JSON doc and extract a field} -setup {
		set pre	[json get [json test_string obj3]]
		set json	[json test_string obj3]
		json exists $json
	} -deps {
		yajltcl		{package require yajl}
	} -overhead {
		old_json_parse - ours - ours_get - yajltcl	{json test_string obj3}
		ours_pre									{return -level 0 $pre}
		ours_get_native								{return -level 0 $json}
	} -compare {
		old_json_parse {
			dict get [lindex [dict get [json_old parse [json test_string obj3]] baz] end] inner
		}

		ours {
			dict get [lindex [dict get [json parse [json test_string obj3]] baz] end] inner
		}

		ours_get {
			json get [json test_string obj3] baz end inner
		}

		ours_pre {
			dict get [lindex [dict get $pre baz] end] inner
		}

		ours_get_native {
			json get $json baz end inner
		}

		yajltcl {
			dict get [lindex [dict get [yajl::json2dict [json test_string obj3]] baz] end] inner
		}
	} -cleanup {
		unset -nocomplain json pre
	} -result obj
	#>>>
	# parse-2.1 <<<
	if {[file readable [file join $here items1.json]]} {
		bench parse-2.1 {Parse a few MB of json} -batch 1 -min_it 5 -setup {
			set json	" [readfile [file join $here items1.json]]"
		} -deps {
			yajltcl_access	{package require yajl}
		} -compare {
			just_parse {
				json normalize $json
				list 83000 5434
			}
			valid {
				json valid $json
				list 83000 5434
			}
			valid_no_comments {
				json valid -extensions {} $json
				list 83000 5434
			}
			ours {
				set c		0
				set nrpics	0
				set p		[string trim $json]
				json foreach hit [json extract $p hits hits] {
					if {[json exists $hit _source shopstatus]} {
						json get $hit _source shopstatus
					}
					incr c		[json get $hit _source ?size]
					incr nrpics [json get $hit _source itemnrpics]
				}
				json get $p hits hits end _source shopstatus
				list $c $nrpics
			}
			yajltcl_access {
				set c		0
				set nrpics	0
				foreach hit [dict get [yajl::json2dict $json] hits hits] {
					if {[dict exists $hit _source shopstatus]} {
						dict get $hit _source shopstatus
					}
					incr c		[dict size [dict get $hit _source]]
					incr nrpics [dict get $hit _source itemnrpics]
				}
				dict get [lindex [dict get [yajl::json2dict $json] hits hits] end] _source shopstatus
				list $c $nrpics
			}
		} -overhead {
			just_parse - valid - valid_no_comments	{return -level 0 $json; list 83000 5434}
			yajltcl_access							{return -level 0 $json}
			ours									{string trim $json}
		} -cleanup {
			unset -nocomplain json c nrpics
		} -result {83000 5434}
	}
	#>>>
	# parse-3.1 <<<
	if {[file readable [file join $here sample.json]]} {
		bench parse-3.1 {Parse a large json doc with deep nesting and many UTF-8 chars} -batch 1 -min_it 5 -setup {
			# Sample from the json-test-suite project: https://code.google.com/p/json-test-suite/downloads/detail?name=sample.zip
			set json " [readfile [file join $here sample.json]]"
		} -deps {
			yajltcl {package require yajl}
		} -compare {
			ours	{ json length [string trim $json]                 }
			valid	{ json valid $json                                }
			yajltcl	{ dict size [yajl::json2dict [string trim $json]] }
		} -overhead {
			ours	{string trim $json}
			valid	{return -level 0 $json}
			yajltcl	{string trim $json}
		} -cleanup {
			unset -nocomplain json
		} -results {
			ours - yajltcl	3
			valid			1
		}
	}
	#>>>
}
main

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
