if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

package require rl_json

source [file join [file dirname [info script]] helpers.tcl]

test new-1.1 {Create an array from type-value pairs} -setup { #<<<
	set typevalues [lmap v {a 1 c 2 e 3 g} {
		if {[string is digit $v]} {
			list number $v;
		} else {
			list string $v;
		}
	}];
} -body {
	json new array {*}$typevalues
} -cleanup {
	unset -nocomplain typevalues;
} -result {["a",1,"c",2,"e",3,"g"]}
#>>>

test new-1.2 {Create an array from JSON values} -setup { #<<<
	set values [lmap v {a 1 c 2 e 3 g} {
		if {[string is digit $v]} {
			json new number $v;
		} else {
			json new string $v;
		}
	}];
} -body {
	json new array {*}[lmap v $values {
		list json $v;
	}];
} -cleanup {
	unset -nocomplain values v;
} -result {["a",1,"c",2,"e",3,"g"]}
#>>>
test new-2.1 {json string, plain string} -body { #<<<
	json string new-2.1
} -result {"new-2.1"}
#>>>
test new-2.2 {json string, too few args} -body { #<<<
	set code [catch {json string} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {Wrong # of arguments.  Must be "string val"} NONE]
#>>>
test new-2.3 {json string, too many args} -body { #<<<
	set code [catch {json string foo bar} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {Wrong # of arguments.  Must be "string val"} NONE]
#>>>
test new-2.4 {json string, template string} -body { #<<<
	json string ~S:foo
} -result {"~S:foo"}
#>>>
test new-3.1 {json number, int} -body { #<<<
	json number 1234
} -result 1234
#>>>
test new-3.2 {json number, too few args} -body { #<<<
	set code [catch {json number} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {Wrong # of arguments.  Must be "number val"} NONE]
#>>>
test new-3.3 {json number, too many args} -body { #<<<
	set code [catch {json number foo bar} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {Wrong # of arguments.  Must be "number val"} NONE]
#>>>
test new-3.4 {json number, not a number} -body { #<<<
	set code [catch {json number foo} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {can't use non-numeric string as operand of "+"} {ARITH DOMAIN {non-numeric string}}]
#>>>
test new-3.5 {json number, not a number: empty string} -body { #<<<
	set code [catch {json number ""} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {can't use empty string as operand of "+"} {ARITH DOMAIN {empty string}}]
#>>>
test new-3.6 {json number, float} -body { #<<<
	json number 1234.4
} -result 1234.4
#>>>
test new-3.7 {json number, scientific notation} -body { #<<<
	json number 1e6
} -result 1000000.0
#>>>
test new-4.1.1 {json boolean, truthy int} -body { #<<<
	json boolean 1234
} -result true
#>>>
test new-4.1.2 {json boolean, truthy string: true} -body { #<<<
	json boolean true
} -result true
#>>>
test new-4.1.3 {json boolean, truthy string: tr} -body { #<<<
	json boolean tr
} -result true
#>>>
test new-4.1.4 {json boolean, truthy string: yes} -body { #<<<
	json boolean yes
} -result true
#>>>
test new-4.1.5 {json boolean, truthy string: on} -body { #<<<
	json boolean on
} -result true
#>>>
test new-4.1.6 {json boolean, truthy int: -1} -body { #<<<
	json boolean -1
} -result true
#>>>
test new-4.1.7 {json boolean, truthy int} -body { #<<<
	json boolean 0
} -result false
#>>>
test new-4.1.8 {json boolean, truthy string: false} -body { #<<<
	json boolean false
} -result false
#>>>
test new-4.1.9 {json boolean, truthy string: fal} -body { #<<<
	json boolean fal
} -result false
#>>>
test new-4.1.10 {json boolean, truthy string: no} -body { #<<<
	json boolean no
} -result false
#>>>
test new-4.1.11 {json boolean, truthy string: off} -body { #<<<
	json boolean off
} -result false
#>>>
test new-4.2 {json boolean, too few args} -body { #<<<
	set code [catch {json boolean} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {Wrong # of arguments.  Must be "boolean val"} NONE]
#>>>
test new-4.3 {json boolean, too many args} -body { #<<<
	set code [catch {json boolean foo bar} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {Wrong # of arguments.  Must be "boolean val"} NONE]
#>>>
test new-4.4 {json boolean, invalid string} -body { #<<<
	set code [catch {json boolean foo} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {expected boolean value but got "foo"} {TCL VALUE NUMBER}]
#>>>
test new-4.5 {json boolean, empty string} -body { #<<<
	set code [catch {json boolean ""} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain code r o
} -result [list 1 {expected boolean value but got ""} {TCL VALUE NUMBER}]
#>>>
test new-4.6 {json boolean, float} -body { #<<<
	json boolean 1234.4
} -result true
#>>>
test new-4.7 {json boolean, scientific notation} -body { #<<<
	json boolean 1e6
} -result true
#>>>


::tcltest::cleanupTests
return

# Local Variables:
# mode: tcl
# tab-width: 4
# End:
# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
