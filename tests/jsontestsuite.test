if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

package require rl_json
namespace path {::rl_json}

proc readutf {fn encoding} { #<<<
	set read_utf16le {h { #<<<
		if {"utf-16le" in [encoding names]} {
			#puts "using encoding utf-16le"
			encoding convertfrom utf-16le [read $h]
		} else {
			# TODO: proper UTF16
			set res	{}
			binary scan [read $h] su* chars
			foreach char $chars {
				append res [format %c $char]
			}
			set res
		}
	}}
	#>>>
	set read_utf16be {h { #<<<
		if {"utf-16be" in [encoding names]} {
			#puts "using encoding utf-16be"
			encoding convertfrom utf-16be [read $h]
		} else {
			# TODO: proper UTF16
			set res	{}
			binary scan [read $h] Su* chars
			foreach char $chars {
				append res [format %c $char]
			}
			set res
		}
	}}
	#>>>

	set h	[open $fn rb]
	try {
		if {$encoding eq "auto"} {
			set bom	[binary encode hex [read $h 3]]
			seek $h 0
			#puts "auto, bom: $bom"
			switch -glob -- $bom {
				feff* { set encoding utf-16be }
				fffe* { set encoding utf-16le }

				efbbbf -
				default { # No BOM, or UTF-8 BOM
					set encoding utf-8
				}
			}
		}

		#puts "reading $fn as $encoding"
		switch -- $encoding {
			utf-8 {
				chan configure $h -encoding utf-8
				read $h
			}

			utf-16le { apply $read_utf16le $h }
			utf-16be { apply $read_utf16be $h }

			default {
				error "Unsupported encoding \"$encoding\""
			}
		}
	} finally {
		close $h
	}
}

#>>>
proc readutf_in_utf8 {fn encoding} { #<<<
	set read_utf16le {h { #<<<
		if {"utf-16le" in [encoding names]} {
			encoding convertfrom utf-16le [read $h]
		} else {
			set res	{}
			binary scan [read $h] su* chars
			foreach char $chars {
				append res [format %c $char]
			}
			set res
		}
	}}
	#>>>
	set read_utf16be {h { #<<<
		if {"utf-16be" in [encoding names]} {
			encoding convertfrom utf-16le [read $h]
		} else {
			set res	{}
			binary scan [read $h] Su* chars
			foreach char $chars {
				append res [format %c $char]
			}
			set res
		}
	}}
	#>>>

	set h	[open $fn r]
	try {
		chan configure $h -encoding utf-8
		switch -- $encoding {
			auto {
				set bom	[read $h 3]
				seek $h 0
				switch -glob -- [binary encode hex $bom] {
					fffe* { apply $read_utf16le $h }
					feff* { apply $read_utf16be $h }

					efbbbf -
					default { # No BOM, or UTF-8 BOM
						read $h
					}
				}
			}

			utf-16le { apply $read_utf16le $h }
			utf-16be { apply $read_utf16be $h }
		}
	} finally {
		close $h
	}
}
#>>>

foreach file [glob -nocomplain -type f [file join [file dirname [info script]] JSONTestSuite test_parsing *.json]] {
	if {![regexp {/([yni])_(.*)\.json$} $file - expected name]} {
		puts stderr "Could not interpret test case filename \"$file\""
		continue
	}

	set encoding	auto

	# outcomes overrides: comments, etc
	switch -- $name {
		object_trailing_comment_slash_open -
		structure_object_with_comment -
		object_trailing_comment {
			set expected y
		}

		string_utf16BE_no_BOM {
			set encoding utf-16be
		}

		string_utf16LE_no_BOM {
			set encoding utf-16le
		}
	}

	switch -- $expected {
		y {
			test jsontestsuite-$name $name -body [list json normalize [readutf $file $encoding]] -match glob -result * -returnCodes ok
		}
		n {
			test jsontestsuite-$name $name -body [list json normalize [readutf $file $encoding]] -match glob -result * -returnCodes error
		}
		i {
			test jsontestsuite-$name $name -body [list json normalize [readutf $file $encoding]] -match glob -result * -returnCodes ok
		}
	}
}

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4


