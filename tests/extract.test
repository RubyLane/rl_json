if {"::tcltest" ni [namespace children]} {
	package require tcltest
	namespace import ::tcltest::*
}

package require rl_json
namespace path {::rl_json}

test extract-1.1 {extract a value from an object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo
} -result {"bar"}
#>>>
test extract-1.2 {extract a value from an object, unused valid default} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo
} -result {"bar"}
#>>>
test extract-1.3 {extract a value from an object, unused invalid default} -body { #<<<
	json extract -default def {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo
} -returnCodes error -result {Error parsing JSON value: Illegal character at offset 0} -errorCode {RL JSON PARSE {Illegal character} def 0}
#>>>
test extract-2.1 {extract a value from an object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz
} -result {["str",123,123.4,true,false,null,{"inner":"obj"}]}
#>>>
test extract-3.1 {extract a value from a nested object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz": {
				"query": "filtered"
			}
		}
	} baz query
} -result {"filtered"}
#>>>
test extract-4.1 {extract a value from an array} -body { #<<<
	json extract {["a", "b", "c", "d"]} 2
} -result {"c"}
#>>>
test extract-4.4 {extract an index from an array relative to the end} -body { #<<<
	json extract {["a", "b", "c", "d"]} end
} -result {"d"}
#>>>
test extract-4.5 {extract an index from an array relative to the end} -body { #<<<
	json extract {["a", null, "c", "d"]} end-2
} -result null
#>>>
test extract-4.6 {extract an index from an array relative to the end} -body { #<<<
	json extract {["a", "b", "c", "d"]} end-4
} -result null
#>>>
test extract-5.1 {extract a value from an array in an object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 2
} -result 123.4
#>>>
test extract-6.1 {extract of a toplevel value} -body { #<<<
	# Note - should not be normalized
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	}
} -result {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	}
#>>>
test extract-6.2 {extract toplevel array}	{json extract {[1, 2, 3]}}		{[1, 2, 3]}
test extract-6.3 {extract toplevel string}	{json extract {"foo"}}			{"foo"}
test extract-6.4 {extract toplevel number}	{json extract 1e6}				1e6
test extract-6.5 {extract toplevel true}	{json extract true}				true
test extract-6.6 {extract toplevel false}	{json extract false}			false
test extract-6.7 {extract toplevel null}	{json extract null}				null
test extract-6.8 {extract toplevel null}	{json extract -default 42 null}	42
test extract-7.1 {extract for invalid value - empty string} -body { #<<<
	json extract {} foo
} -returnCodes error -result {Error parsing JSON value: No JSON value found at offset 0}
#>>>
test extract-7.2 {extract for invalid value - truncated object} -body { #<<<
	json extract "\{\"foo\":\"bar\"" foo
} -returnCodes error -result {Error parsing JSON value: Unterminated object at offset 0}
#>>>
test extract-7.3 {extract for invalid value - truncated array} -body { #<<<
	json extract {["foo", "bar"} 1
} -returnCodes error -result {Error parsing JSON value: Unterminated array at offset 0}
#>>>
test extract-7.4 {extract for invalid value - truncated string} -body { #<<<
	json extract {"foo} foo
} -returnCodes error -result {Error parsing JSON value: Document truncated at offset 4}
#>>>
test extract-7.5 {extract for invalid value - truncated boolean: true} -body { #<<<
	json extract {tru} foo
} -returnCodes error -result {Error parsing JSON value: Illegal character at offset 0}
#>>>
test extract-7.6 {extract for invalid value - truncated boolean: false} -body { #<<<
	json extract {fals} foo
} -returnCodes error -result {Error parsing JSON value: Illegal character at offset 0}
#>>>
test extract-7.7 {extract for invalid value - truncated null} -body { #<<<
	json extract {nul} foo
} -returnCodes error -result {Error parsing JSON value: Illegal character at offset 0}
#>>>

# Modifiers - ?type
test extract-20.1 {type modifier, string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.2 {type modifier, array} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz ?type
} -returnCodes error -result {Expected an integer index or end(-integer)?, got ?type}
#>>>
test extract-20.3 {type modifier, number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 1 ?type
} -returnCodes error -result {Cannot descend into atomic type "number" with path element 3: "?type"}
#>>>
test extract-20.4 {type modifier, boolean} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 3 ?type
} -returnCodes error -result {Cannot descend into atomic type "boolean" with path element 3: "?type"}
#>>>
test extract-20.5 {type modifier, null} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 5 ?type
} -returnCodes error -result {Cannot descend into atomic type "null" with path element 3: "?type"}
#>>>
test extract-20.6 {type modifier, object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 6 ?type
} -returnCodes error -result {Path element 4: "?type" not found}
#>>>
test extract-20.7 {type modifier, template subst: string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~S:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.8 {type modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~N:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.9 {type modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~B:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.10 {type modifier, template subst: literal} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~L:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.11 {type modifier, template subst: json doc} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~J:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.12 {type modifier, template subst: json template} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~T:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>
test extract-20.13 {type modifier, template subst: invalid} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~X:dynamic"
		}
	} something ?type
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?type"}
#>>>

# Modifiers - ?length
test extract-21.1 {length modifier, string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.2 {length modifier, array} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz ?length
} -returnCodes error -result {Expected an integer index or end(-integer)?, got ?length}
#>>>
test extract-21.3 {length modifier, number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 1 ?length
} -returnCodes error -result {Cannot descend into atomic type "number" with path element 3: "?length"}
#>>>
test extract-21.4 {length modifier, boolean} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 3 ?length
} -returnCodes error -result {Cannot descend into atomic type "boolean" with path element 3: "?length"}
#>>>
test extract-21.5 {length modifier, null} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 5 ?length
} -returnCodes error -result {Cannot descend into atomic type "null" with path element 3: "?length"}
#>>>
test extract-21.6 {length modifier, object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 6 ?length
} -returnCodes error -result {Path element 4: "?length" not found}
#>>>
test extract-21.7 {length modifier, template subst: string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~S:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.8 {length modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~N:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.9 {length modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~B:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.10 {length modifier, template subst: literal} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~L:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.11 {length modifier, template subst: json doc} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~J:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.12 {length modifier, template subst: json template} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~T:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>
test extract-21.13 {length modifier, template subst: invalid} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~X:dynamic"
		}
	} something ?length
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?length"}
#>>>

# Modifiers - ?size
test extract-22.1 {size modifier, string} -body { #<<<
	json extract {
		{
			"foo": "bar x",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.2 {size modifier, array} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz ?size
} -returnCodes error -result {Expected an integer index or end(-integer)?, got ?size}
#>>>
test extract-22.3 {size modifier, number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 1 ?size
} -returnCodes error -result {Cannot descend into atomic type "number" with path element 3: "?size"}
#>>>
test extract-22.4 {size modifier, boolean} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 3 ?size
} -returnCodes error -result {Cannot descend into atomic type "boolean" with path element 3: "?size"}
#>>>
test extract-22.5 {size modifier, null} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 5 ?size
} -returnCodes error -result {Cannot descend into atomic type "null" with path element 3: "?size"}
#>>>
test extract-22.6 {size modifier, object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj", "x": "y", "z": null}]
		}
	} baz 6 ?size
} -returnCodes error -result {Path element 4: "?size" not found}
#>>>
test extract-22.7 {size modifier, template subst: string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~S:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.8 {size modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~N:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.9 {size modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~B:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.10 {size modifier, template subst: literal} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~L:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.11 {size modifier, template subst: json doc} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~J:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.12 {size modifier, template subst: json template} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~T:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>
test extract-22.13 {size modifier, template subst: invalid} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~X:dynamic"
		}
	} something ?size
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?size"}
#>>>

# Modifiers - ?keys
test extract-23.1 {keys modifier, string} -body { #<<<
	json extract {
		{
			"foo": "bar x",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} foo ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.2 {keys modifier, array} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz ?keys
} -returnCodes error -result {Expected an integer index or end(-integer)?, got ?keys}
#>>>
test extract-23.3 {keys modifier, number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 1 ?keys
} -returnCodes error -result {Cannot descend into atomic type "number" with path element 3: "?keys"}
#>>>
test extract-23.4 {keys modifier, boolean} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 3 ?keys
} -returnCodes error -result {Cannot descend into atomic type "boolean" with path element 3: "?keys"}
#>>>
test extract-23.5 {keys modifier, null} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}]
		}
	} baz 5 ?keys
} -returnCodes error -result {Cannot descend into atomic type "null" with path element 3: "?keys"}
#>>>
test extract-23.6 {keys modifier, object} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj", "x": "y", "z": null}]
		}
	} baz 6 ?keys
} -returnCodes error -result {Path element 4: "?keys" not found}
#>>>
test extract-23.7 {keys modifier, template subst: string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~S:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.8 {keys modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~N:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.9 {keys modifier, template subst: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~B:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.10 {keys modifier, template subst: literal} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~L:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.11 {keys modifier, template subst: json doc} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~J:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.12 {keys modifier, template subst: json template} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~T:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>
test extract-23.13 {keys modifier, template subst: invalid} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": "~X:dynamic"
		}
	} something ?keys
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "?keys"}
#>>>

test extract-50.1 {escaping a modifier} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} something ??type
} -returnCodes error -result {Path element 3: "??type" not found}
#>>>

# Invalid paths
test extract-60.1 {invalid path: missing key} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} blah
} -returnCodes error -result {Path element 2: "blah" not found}
#>>>
test extract-60.2 {invalid path: subscribed atomic: string} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.3 {invalid path: subscribed atomic: number} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 1 blah
} -returnCodes error -result {Cannot descend into atomic type "number" with path element 3: "blah"}
#>>>
test extract-60.4 {invalid path: subscribed atomic: boolean} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 3 blah
} -returnCodes error -result {Cannot descend into atomic type "boolean" with path element 3: "blah"}
#>>>
test extract-60.5 {invalid path: subscribed atomic: null} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 5 blah
} -returnCodes error -result {Cannot descend into atomic type "null" with path element 3: "blah"}
#>>>
test extract-60.6 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz blah
} -returnCodes error -result {Expected an integer index or end(-integer)?, got blah}
#>>>
test extract-60.7 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-12
} -result null
#>>>
test extract-60.8 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 100
} -result null
#>>>
test extract-60.9 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz -2
} -result null
#>>>
test extract-60.10 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-2foo
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end-2foo}
#>>>
test extract-60.11 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-foo
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end-foo}
#>>>
test extract-60.12 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end2
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end2}
#>>>
test extract-60.13 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end+2
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end+2}
#>>>
test extract-60.14 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz "end- 2"
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end- 2}
#>>>
test extract-60.15 {invalid path: invalid array index} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end-}
#>>>
test extract-60.16 {invalid path: subscribed atomic: template string} -body { #<<<
	json extract {
		{
			"foo": "~S:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.17 {invalid path: subscribed atomic: template number} -body { #<<<
	json extract {
		{
			"foo": "~N:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.18 {invalid path: subscribed atomic: template boolean} -body { #<<<
	json extract {
		{
			"foo": "~B:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.19 {invalid path: subscribed atomic: template json doc} -body { #<<<
	json extract {
		{
			"foo": "~J:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.20 {invalid path: subscribed atomic: template json template} -body { #<<<
	json extract {
		{
			"foo": "~T:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.21 {invalid path: subscribed atomic: template literal} -body { #<<<
	json extract {
		{
			"foo": "~L:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.22 {invalid path: subscribed atomic: template invalid} -body { #<<<
	json extract {
		{
			"foo": "~X:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -returnCodes error -result {Cannot descend into atomic type "string" with path element 2: "blah"}
#>>>
test extract-60.23 {invalid path: subscribed atomic: template invalid} -body { #<<<
	json extract {
		{
			"foo": "~X:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz en
} -returnCodes error -result {Expected an integer index or end(-integer)?, got en}
#>>>
test extract-60.24 {invalid path: subscribed atomic: template invalid} -body { #<<<
	json extract {
		{
			"foo": "~X:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz foo
} -returnCodes error -result {Expected an integer index or end(-integer)?, got foo}
#>>>
test extract-60.25 {Get a template point} -body { #<<<
	json extract {
		{
			"foo": "~S:bar"
		}
	} foo
} -result {"~S:bar"}
#>>>
test extract-61.1 {invalid path: missing key} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} blah
} -result {"def"}
#>>>
test extract-61.2 {invalid path: subscribed atomic: string} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.3 {invalid path: subscribed atomic: number} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 1 blah
} -result {"def"}
#>>>
test extract-61.4 {invalid path: subscribed atomic: boolean} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 3 blah
} -result {"def"}
#>>>
test extract-61.5 {invalid path: subscribed atomic: null} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 5 blah
} -result {"def"}
#>>>
test extract-61.6 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz blah
} -returnCodes error -result {Expected an integer index or end(-integer)?, got blah}
#>>>
test extract-61.7 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-12
} -result {"def"}
#>>>
test extract-61.8 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz 100
} -result {"def"}
#>>>
test extract-61.9 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz -2
} -result {"def"}
#>>>
test extract-61.10 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-2foo
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end-2foo}
#>>>
test extract-61.11 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-foo
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end-foo}
#>>>
test extract-61.12 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end2
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end2}
#>>>
test extract-61.13 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end+2
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end+2}
#>>>
test extract-61.14 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz "end- 2"
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end- 2}
#>>>
test extract-61.15 {invalid path: invalid array index} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz end-
} -returnCodes error -result {Expected an integer index or end(-integer)?, got end-}
#>>>
test extract-61.16 {invalid path: subscribed atomic: template string} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~S:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.17 {invalid path: subscribed atomic: template number} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~N:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.18 {invalid path: subscribed atomic: template boolean} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~B:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.19 {invalid path: subscribed atomic: template json doc} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~J:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.20 {invalid path: subscribed atomic: template json template} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~T:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.21 {invalid path: subscribed atomic: template literal} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~L:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.22 {invalid path: subscribed atomic: template invalid} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~X:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} foo blah
} -result {"def"}
#>>>
test extract-61.23 {invalid path: subscribed atomic: template invalid} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~X:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz en
} -returnCodes error -result {Expected an integer index or end(-integer)?, got en}
#>>>
test extract-61.24 {invalid path: subscribed atomic: template invalid} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~X:bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} baz foo
} -returnCodes error -result {Expected an integer index or end(-integer)?, got foo}
#>>>
test extract-61.25 {Get a template point} -body { #<<<
	json extract -default {"def"} {
		{
			"foo": "~S:bar"
		}
	} foo
} -result {"~S:bar"}
#>>>

test extract-70.1 {Path tail element isn't interpreted as a modifier - no need to escape} -body { #<<<
	json extract {
		{
			"foo": "bar",
			"baz":  ["str", 123, 123.4, true, false, null, {"inner": "obj"}],
			"something": {
				"?type": "fromdoc"
			}
		}
	} something ?type
} -result {"fromdoc"}
#>>>

# Coverage golf
test extract-jsonExtract-1.1 {check args} -body {json extract} -returnCodes error -errorCode {TCL WRONGARGS} -result {wrong # args: should be "extract ?-default defaultValue? json_val ?path ...?"}
test extract-jsonExtract-2.1 {check args} -body {json extract -default {"def"}} -returnCodes error -errorCode {TCL WRONGARGS} -result {wrong # args: should be "extract ?-default defaultValue? json_val ?path ...?"}
test extract-jsonExtract-3.1 {check args} -body {json extract -foo def} -returnCodes error -errorCode {TCL LOOKUP INDEX option -foo} -result {bad option "-foo": must be *} -match glob
test extract-jsonExtract-4.1 {check args} -body {json extract -default} -returnCodes error -errorCode {TCL ARGUMENT MISSING} -result {missing argument to "-default"}
test extract-jsonExtract-4.2 {check args} -body {json extract -default bad} -returnCodes error -errorCode {RL JSON PARSE {Illegal character} bad 0} -result {Error parsing JSON value: Illegal character at offset 0}
test extract-jsonExtract-5.1 {check args} -body {json extract -- true} -result true
#test extract-jsonExtract-5.2 {check args} -body {json extract true} -result true
test extract-jsonExtract-6.1 {default on null} -body {json extract -default {"def"} null} -result {"def"}

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
